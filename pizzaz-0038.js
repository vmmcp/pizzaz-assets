// –ü–†–ò–Å–ú structuredContent –∏ pizzaTopping –∏–∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —à–∏—Ä–æ–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –º–µ—Å—Ç,
// —á—Ç–æ–±—ã –ø—Ä–æ—â–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å: –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, postMessage, CustomEvent, URL, data-* –∏ —Ç.–ø.

(function () {
  const ROOT_ID = 'pizzaz-root';

  function $(sel, root = document) { return root.querySelector(sel); }

  function log(...args) {
    // –ü–æ–º–æ–≥–∞–µ—Ç –≤–∏–¥–µ—Ç—å, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ
    console.log('[pizzaz]', ...args);
  }

  function safeJsonParse(v, fallback) {
    try { return JSON.parse(v); } catch { return fallback; }
  }

  function readFromUrl() {
    const url = new URL(window.location.href);
    const topping = url.searchParams.get('pizzaTopping');
    return topping ? { pizzaTopping: topping } : null;
  }

  function readFromDom(rootEl) {
    if (!rootEl) return null;
    const ds = rootEl.dataset || {};
    if (ds.pizzatopping) return { pizzaTopping: ds.pizzatopping };

    // <script type="application/json" id="structured-content">...</script>
    const el = document.getElementById('structured-content');
    if (el && el.textContent) {
      const json = safeJsonParse(el.textContent, null);
      if (json && typeof json === 'object') return json;
    }
    return null;
  }

  function readFromGlobals() {
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ "–≥–ª–æ–±–∞–ª–∫–∏", –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø–æ–ª–æ–∂–∏—Ç—å structuredContent
    const candidates = [
      window.__OPENAI_WIDGET__,
      window.__WIDGET_DATA__,
      window.__structuredContent,
      window.openai && window.openai.structuredContent,
      window.__OPENAI__,
    ].filter(Boolean);

    for (const c of candidates) {
      if (c && typeof c === 'object') {
        // –ª–∏–±–æ —Ü–µ–ª–∏–∫–æ–º structuredContent, –ª–∏–±–æ –ø—Ä—è–º–æ pizzaTopping –Ω–∞ –∫–æ—Ä–Ω–µ
        if (c.structuredContent && typeof c.structuredContent === 'object') {
          return c.structuredContent;
        }
        if ('pizzaTopping' in c) return { pizzaTopping: c.pizzaTopping };
      }
    }
    return null;
  }

  function normalizeData(data) {
    if (!data || typeof data !== 'object') return { pizzaTopping: undefined, _raw: {} };
    const pizzaTopping = data.pizzaTopping ?? data.topping ?? data.pizza ?? undefined;
    return { pizzaTopping, _raw: data };
  }

  function initialData(rootEl) {
    // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞/–≥–ª–æ–±–∞–ª–∫–∏ -> DOM -> URL -> –ø—É—Å—Ç–æ
    return (
      normalizeData(readFromGlobals()) ||
      normalizeData(readFromDom(rootEl)) ||
      normalizeData(readFromUrl()) ||
      { pizzaTopping: undefined, _raw: {} }
    );
  }

  function render(state) {
    const root = document.getElementById(ROOT_ID);
    if (!root) return;

    const toppingText = state.pizzaTopping ? String(state.pizzaTopping) : '‚Äî –Ω–µ –∑–∞–¥–∞–Ω ‚Äî';

    root.innerHTML = `
      <div class="pz-header">
        <div class="pz-title">üçï Pizza Map (demo)</div>
        <div class="pz-badge">topping</div>
      </div>

      <div class="pz-card">
        <div class="pz-kv">
          <div class="k">pizzaTopping:</div>
          <div class="v" id="pz-topping-value">${escapeHtml(toppingText)}</div>

          <div class="k">source raw:</div>
          <div class="v"><pre style="margin:0;white-space:pre-wrap">${escapeHtml(JSON.stringify(state._raw ?? {}, null, 2))}</pre></div>
        </div>

        <div class="pz-row">
          <input class="pz-input" id="pz-input" placeholder="–≤–≤–µ–¥–∏—Ç–µ topping..." value="${escapeAttr(state.pizzaTopping ?? '')}"/>
          <button class="pz-btn" id="pz-apply">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
        </div>

        <div class="pz-note">
          –ò—Å—Ç–æ—á–Ω–∏–∫–∏: structuredContent –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, postMessage/CustomEvent, data-–∞—Ç—Ä–∏–±—É—Ç—ã, query-–ø–∞—Ä–∞–º–µ—Ç—Ä.<br/>
          –ú–æ–∂–Ω–æ —Ä—É–∫–∞–º–∏: <code>window.__setPizzaTopping('pepperoni')</code>
        </div>
      </div>
    `;

    // –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    $('#pz-apply')?.addEventListener('click', () => {
      const val = $('#pz-input')?.value ?? '';
      update({ pizzaTopping: val }, 'local');
    });
  }

  function escapeHtml(s) {
    return String(s)
      .replaceAll('&', '&amp;')
      .replaceAll('<', '&lt;')
      .replaceAll('>', '&gt;');
  }
  function escapeAttr(s) {
    return String(s)
      .replaceAll('&', '&amp;')
      .replaceAll('"', '&quot;');
  }

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
  window.__setPizzaTopping = function (topping) {
    update({ pizzaTopping: topping }, 'global');
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  let STATE = { pizzaTopping: undefined, _raw: {} };

  function update(data, source = 'unknown') {
    const normalized = normalizeData(data);
    // –û–±–Ω–æ–≤–ª—è–µ–º "—Å—ã—Ä–æ–π" –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    STATE = { pizzaTopping: normalized.pizzaTopping, _raw: { ...(STATE._raw || {}), ...data, _source: source } };
    log('update <-', source, STATE);
    render(STATE);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ structuredContent
  function setupListeners() {
    // 1) postMessage
    window.addEventListener('message', (event) => {
      const d = event?.data;
      if (!d || typeof d !== 'object') return;

      // —á–∞—Å—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–ª–∞–¥—É—Ç –ª–∏–±–æ structuredContent, –ª–∏–±–æ –ø—Ä—è–º–æ –∫–ª—é—á–∏
      if (d.structuredContent && typeof d.structuredContent === 'object') {
        update(d.structuredContent, 'postMessage.structuredContent');
      } else if ('pizzaTopping' in d) {
        update({ pizzaTopping: d.pizzaTopping }, 'postMessage.direct');
      }
    });

    // 2) CustomEvent –Ω–∞ window/document
    function ceHandler(e) {
      const d = e?.detail;
      if (d && typeof d === 'object') {
        if (d.structuredContent) update(d.structuredContent, 'CustomEvent.structuredContent');
        else if ('pizzaTopping' in d) update({ pizzaTopping: d.pizzaTopping }, 'CustomEvent.direct');
      }
    }
    window.addEventListener('openai:structured-content', ceHandler);
    document.addEventListener('openai:structured-content', ceHandler);

    // 3) Fallback: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª–æ–∫ (–Ω–∞ —Å–ª—É—á–∞–π –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
    let polls = 0;
    const iv = setInterval(() => {
      polls += 1;
      const g = readFromGlobals();
      if (g && g.pizzaTopping !== undefined) {
        update(g, 'poll.globals');
        clearInterval(iv);
      }
      if (polls > 30) clearInterval(iv);
    }, 300);
  }

  function boot() {
    const root = document.getElementById(ROOT_ID);
    if (!root) {
      log(`–ù–µ –Ω–∞–π–¥–µ–Ω #${ROOT_ID} ‚Äî –≤–∏–¥–∂–µ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
      return;
    }
    STATE = initialData(root);
    log('initial STATE', STATE);
    render(STATE);
    setupListeners();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', boot);
  } else {
    boot();
  }
})();
